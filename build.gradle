plugins {
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'java'
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

description = 'Provides functionality for managing the books in the catalog.'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('otelVersion', "2.4.0")
	set('springCloudVersion', "2023.0.2")
	// set('testKeycloakVersion', "3.3.1") // Keycloak 의존성 제거를 위해 주석 처리
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	// implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server' // OAuth2 관련 의존성 제거를 위해 주석 처리
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'

	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly "io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}"
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
	// testImplementation 'org.springframework.security:spring-security-test' // Spring Security 테스트 관련 의존성 제거를 위해 주석 처리
	// testImplementation 'org.testcontainers:keycloak' // Keycloak 테스트 컨테이너 의존성 제거를 위해 주석 처리
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

springBoot {
	buildInfo()
}

bootRun {
	systemProperty 'spring.profiles.active', 'testdata'
}

bootBuildImage {
	builder = "docker.io/paketobuildpacks/builder-jammy-base"
	imageName = "${project.name}"
	environment = ["BP_JVM_VERSION": "17"]

	docker {
		publishRegistry {
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
